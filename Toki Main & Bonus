'''
Given a word W made from letters of the English alphabet, determine if it follows the rules of
toki pona phonotactics.
In toki pona phonotactics, words are made of one or more valid syllables. All valid syllables
follow a (C)V(n) structure: an optional consonant, followed by a mandatory vowel, followed by
an optional n. Consonants and vowels are single letters from the toki pona alphabet.
The toki pona alphabet only has 14 letters and is a subset of the English alphabet. These are:
● The consonants m, n, p, t, k, s, w, j, l (n is a consonant, as well as an optional ending)
● The vowels a, e, i, o, u
Finally, words must not contain any of these contiguous illegal sequences (including between
syllables):
● wu, wo, ji, ti, nn, or nm
● Adjacent vowels such as aa, ei, uo, aoi, etc.
'''
def solve(S: str) -> str:
   #struc = optional cons, mandatory vow, optional n
    wordContained = lambda s, l: any(map(lambda x: x in s, l))  
    illegalSegments = ['wu', 'wo', 'ji', 'ti', 'nn', 'nm']
    vowels = 'aeiou'
    consts = 'mnptkswjl'
    vowelCount = 0
    vowelsPassed = 1
    
    if wordContained(S, illegalSegments): #illegal segment present -> ike
        return 'ike'

    for j in range(len(S)):
        if S[j] in vowels:
            vowelCount = vowelCount+1

    if len(S) < 1: #impossible length word -> ike
        return 'ike'

    if len(S) > 3*vowelCount: #impossible length word -> ike
        return 'ike'
    
    for x in range(len(S)):
        if S[x] in vowels:
            if (x-1) >= 0: #before char exists 
                if S[x-1] in vowels: #before char is a vowel -> ike
                    return 'ike'
                if S[x-1] not in consts: #before char is a banned const -> ike
                    return 'ike'
        
            if (x+1) < len(S): #after char exists
                if S[x+1] in vowels: #after char is a vowel -> ike
                    return 'ike'
                if S[x+1] not in consts: #after char is a banned const -> ike
                    return 'ike'
            
            if vowelsPassed == vowelCount:
                if (x+1) < len(S): #after char exists
                    if S[x+1] != 'n': #after char on 1 syllable char doesnt = n -> ike
                        return 'ike'
            vowelsPassed = vowelsPassed+1
                 
    return 'pona'         
                
def main():
    T = int(input())
    for _ in range(T):
        S = input()
        print(solve(S))

if __name__ == '__main__':
    main()
