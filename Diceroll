'''
Given N sides of a fair die labeled with the numbers X1
, X2, … , XN on each face, find a
number x you can “zero out” to minimize the amount you’ll pay Jennifert per dice roll, on
average. The faces of the die are not necessarily unique. When you roll the die, the number Xi
that appears face-up causes you to pay Jennifert Xi dollars—unless Xi equals your chosen x,
in which case you don’t have to pay her any money (haha, sucker). A die being fair means that
each face has an equal probability of appearing face-up when the die is rolled.
'''

def solve(N: int, X: list[int]) -> int:
    from collections import Counter
    #N: the number of faces on the die
    #X: the list of numbers on each face of the die

    element_counts = Counter(X)
    sortedList = sorted(X, key=lambda x: element_counts[x], reverse=True)
    noDuplSortedList = list(dict.fromkeys(sortedList))
 
    answer = 0
    currentTotal = 0
    lowestTotal = 1000000000000000

    for i in range(len(noDuplSortedList)):
        currentTotal = 0
        for x in range(N):
            if X[x] != noDuplSortedList[i]: #if array element doesnt match cancel value
                currentTotal += X[x]
        if (currentTotal < lowestTotal):
            lowestTotal = currentTotal
            answer = noDuplSortedList[i]
    return answer

def main():
    T = int(input())
    for _ in range(T):
        N = int(input())
        X = [int(x) for x in input().strip().split(' ')]
        print(solve(N, X))

if __name__ == '__main__':
    main()
